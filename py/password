#!/usr/bin/python
#Author: Ronni Elken Lindsgaard
#Email: ronni.lindsgaard@gmail.com
#Version: 1.0
#Description: Creates a password randomly chosen password of a specified length.
#License: Use and distribute freely, but don't remove author, email etc. (This block of comments)

from optparse import OptionParser
import random,sys,hashlib

parser = OptionParser()
parser.add_option("-l","--len","--length",dest="length",type="int",default="8",help="Length of the password")
#Characters
parser.add_option("--integers",dest="integers",type="string",default="0123456789",help="The integers to choose from")
parser.add_option("--alphas",dest="alphas",type="string",default="abcdefghijklmnopqrstuvwxyz",help="The letters to choose from")
parser.add_option("--specials",dest="specials",type="string",default="[]!#$;:-_%&(){}?+=",help="The special characters to choose from")
#Minimum occurences
parser.add_option("--min-int",dest="min_int",type="int",default=1,help="Minimum number of integers, defaults to 1")
parser.add_option("--min-lowercase",dest="min_lower",type="int",default=1,help="Minimum number of lowercase characters, defaults to 1")
parser.add_option("--min-uppercase",dest="min_upper",type="int",default=1,help="Minimum number of uppercase characters, defaults to 1")
parser.add_option("--min-specialchars",dest="min_special",type="int",default=1,help="Minimum number of special characters, defaults to 1")
#Max occurences
parser.add_option("--max-int",dest="max_int",type="int",default=0)
parser.add_option("--max-lowercase",dest="max_lower",type="int",default=0)
parser.add_option("--max-upercase",dest="max_upper",type="int",default=0)
parser.add_option("--max-specialchars",dest="max_special",type="int",default=0)

#Hashes
parser.add_option("--md5",dest="md5",action="store_true",default=False,help="Display md5 encoding of the password")
parser.add_option("--sha1",dest="sha1",action="store_true",default=False,help="Display sha1 encodeing of the password")
(options,args) = parser.parse_args()

chosen = {} #Which characters have been chosen so far
digits = {} #The characters
max = {} #Maximimum number of occurences
min = {} #Minimum number of occurences

i = 0
if(options.integers):
  min[i] = options.min_int
  max[i] = options.max_int
  digits[i] = options.integers
  i += 1
if(options.alphas):
  min[i] = options.min_lower
  max[i] = options.max_lower
  digits[i] = options.alphas
  i += 1
  min[i] = options.min_upper
  max[i] = options.max_upper
  digits[i] = options.alphas.upper()
  i += 1
if(options.specials):
  min[i] = options.min_special
  max[i] = options.max_special
  digits[i] = options.specials
  i += 1

def password_is_ok():
  for i in range(0,len(min)):
    if(min[i] > chosen[i]):
      return False
  return True

def make_password(length):
  for i in range(0,len(digits)): #Reset the password
    chosen[i] = 0
  password = ""
  while len(password) < length:
    r = random.choice(range(0,len(digits)))
    if(max[r] == 0 or chosen[r] < max[r]): #If we haven't reached the max number of allowed occurences
      chosen[r] += 1
      password += str(random.choice(digits[r]))
  if(password_is_ok()): #Does the password meet the minimum requirements?
    return password
  return make_password(length)

if(options.min_int + options.min_lower + options.min_upper + options.min_special > options.length):
  sys.exit("Required minimum values extends length of password")
if(options.max_int > 0 and options.max_lower > 0 and options.max_upper > 0 and options.max_special > 0):
  if(options.max_int+options.max_lower+options.max_upper+options.max_special < options.length):
    sys.exit("The length of the password extends number of maximum values")

password = make_password(options.length)
print(password)
if(options.md5):
  m = hashlib.md5(password)
  print("md5: "+m.hexdigest())
if(options.sha1):
  m = hashlib.sha1(password)
  print("sha1: "+m.hexdigest())
